name: Build and Release

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  build:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
      with:
        fetch-depth: 0
    
    - name: Set up JDK 17
      uses: actions/setup-java@v4
      with:
        java-version: '17'
        distribution: 'temurin'
    
    - name: Cache Gradle packages
      uses: actions/cache@v3
      with:
        path: |
          ~/.gradle/caches
          ~/.gradle/wrapper
        key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
        restore-keys: |
          ${{ runner.os }}-gradle-
    
    - name: Grant execute permission for gradlew
      run: chmod +x gradlew
    
    - name: Build with Gradle
      run: ./gradlew build
    
    - name: Upload build artifacts
      uses: actions/upload-artifact@v3
      with:
        name: build-artifacts
        path: build/libs/*.jar
    
    - name: Check version change
      id: version_check
      run: |
        # 读取当前版本号
        if [ -f plugin.version ]; then
          CURRENT_VERSION=$(cat plugin.version | grep -o 'V [0-9.]*' | sed 's/V //')
          echo "current_version=$CURRENT_VERSION" >> $GITHUB_OUTPUT
          echo "当前版本: $CURRENT_VERSION"
          
          # 获取上一次提交的版本号
          if git rev-parse HEAD~1 >/dev/null 2>&1; then
            git show HEAD~1:plugin.version > /tmp/old_version 2>/dev/null || echo "V 0.0.0" > /tmp/old_version
            OLD_VERSION=$(cat /tmp/old_version | grep -o 'V [0-9.]*' | sed 's/V //')
            echo "old_version=$OLD_VERSION" >> $GITHUB_OUTPUT
            echo "上一版本: $OLD_VERSION"
            
            # 比较版本号
            if [ "$CURRENT_VERSION" != "$OLD_VERSION" ]; then
              echo "version_changed=true" >> $GITHUB_OUTPUT
              echo "检测到版本变化，将创建Release"
            else
              echo "version_changed=false" >> $GITHUB_OUTPUT
              echo "版本号未变化，仅编译"
            fi
          else
            echo "version_changed=true" >> $GITHUB_OUTPUT
            echo "首次提交，将创建Release"
          fi
        else
          echo "plugin.version文件不存在"
          exit 1
        fi
    
    - name: Create Release
      if: steps.version_check.outputs.version_changed == 'true'
      uses: actions/create-release@v1
      id: create_release
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: v${{ steps.version_check.outputs.current_version }}
        release_name: Release v${{ steps.version_check.outputs.current_version }}
        body: |
          ## 版本 v${{ steps.version_check.outputs.current_version }}
          
          ### 更新内容
          - 自动发布版本 v${{ steps.version_check.outputs.current_version }}
          
          ### 安装方法
          下载 `velocitytablist-${{ steps.version_check.outputs.current_version }}.jar` 文件并放置到 Velocity 服务器的 plugins 目录中。
        draft: false
        prerelease: false
    
    - name: Upload Release Asset
      if: steps.version_check.outputs.version_changed == 'true'
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: ./build/libs/velocitytablist-${{ steps.version_check.outputs.current_version }}.jar
        asset_name: velocitytablist-${{ steps.version_check.outputs.current_version }}.jar
        asset_content_type: application/java-archive